scalar DateTime

type Query {
  budget(
    filter: String
    skip: Int
    first: Int
    orderby: BudgetOrderByInput
  ): Feed!
  budgets(
    where: BudgetWhereInput
    orderBy: BudgetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Budget]!
}

input BudgetWhereInput {
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  postedBy: UserWhereInput
  AND: [BudgetWhereInput!]
  OR: [BudgetWhereInput!]
  NOT: [BudgetWhereInput!]
}

input UserWhereInput {
  id: ID
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

enum BudgetOrderByInput {
  total_ASC
  total_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  savingsTarget_ASC
  savingsTarget_DESC
  createdAt_ASC
  createdAt_DESC
}

type Feed {
  budgets: [Budget!]!
  count: Int!
}

type Mutation {
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload
  postBudget(
    total: Float!
    startDate: DateTime!
    endDate: DateTime!
    savingsTarget: Float!
  ): Budget!
  postExpense(
    expenseAmount: Float!
    expenseDesc: String!
    expenseCategory: String!
    budgetId: ID!
  ): Expense!
  postSavings(amount: Float!, budgetId: ID!): Savings!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  budgets: [Budget!]!
}

type Budget {
  id: ID!
  total: Float!
  startDate: DateTime!
  endDate: DateTime!
  savingsTarget: Float!
  expenses: [Expense]
  savings: [Savings]
  createdAt: DateTime!
  postedBy: User
  sumExpenses: Float
}

type Expense {
  id: ID!
  expenseAmount: Float!
  expenseDesc: String!
  expenseCategory: String!
  budget: Budget!
  user: User!
}

type Savings {
  id: ID!
  amount: Float!
  budget: Budget!
  user: User!
}
