module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBudget {
  count: Int!
}

type AggregateExpense {
  count: Int!
}

type AggregateSavings {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Budget {
  id: ID!
  total: Float!
  startDate: DateTime!
  endDate: DateTime!
  savingsTarget: Float!
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
  savings(where: SavingsWhereInput, orderBy: SavingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Savings!]
}

type BudgetConnection {
  pageInfo: PageInfo!
  edges: [BudgetEdge]!
  aggregate: AggregateBudget!
}

input BudgetCreateInput {
  id: ID
  total: Float!
  startDate: DateTime!
  endDate: DateTime!
  savingsTarget: Float!
  expenses: ExpenseCreateManyInput
  savings: SavingsCreateManyInput
}

input BudgetCreateManyInput {
  create: [BudgetCreateInput!]
  connect: [BudgetWhereUniqueInput!]
}

type BudgetEdge {
  node: Budget!
  cursor: String!
}

enum BudgetOrderByInput {
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  savingsTarget_ASC
  savingsTarget_DESC
}

type BudgetPreviousValues {
  id: ID!
  total: Float!
  startDate: DateTime!
  endDate: DateTime!
  savingsTarget: Float!
}

input BudgetScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  total: Float
  total_not: Float
  total_in: [Float!]
  total_not_in: [Float!]
  total_lt: Float
  total_lte: Float
  total_gt: Float
  total_gte: Float
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  savingsTarget: Float
  savingsTarget_not: Float
  savingsTarget_in: [Float!]
  savingsTarget_not_in: [Float!]
  savingsTarget_lt: Float
  savingsTarget_lte: Float
  savingsTarget_gt: Float
  savingsTarget_gte: Float
  AND: [BudgetScalarWhereInput!]
  OR: [BudgetScalarWhereInput!]
  NOT: [BudgetScalarWhereInput!]
}

type BudgetSubscriptionPayload {
  mutation: MutationType!
  node: Budget
  updatedFields: [String!]
  previousValues: BudgetPreviousValues
}

input BudgetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BudgetWhereInput
  AND: [BudgetSubscriptionWhereInput!]
  OR: [BudgetSubscriptionWhereInput!]
  NOT: [BudgetSubscriptionWhereInput!]
}

input BudgetUpdateDataInput {
  total: Float
  startDate: DateTime
  endDate: DateTime
  savingsTarget: Float
  expenses: ExpenseUpdateManyInput
  savings: SavingsUpdateManyInput
}

input BudgetUpdateInput {
  total: Float
  startDate: DateTime
  endDate: DateTime
  savingsTarget: Float
  expenses: ExpenseUpdateManyInput
  savings: SavingsUpdateManyInput
}

input BudgetUpdateManyDataInput {
  total: Float
  startDate: DateTime
  endDate: DateTime
  savingsTarget: Float
}

input BudgetUpdateManyInput {
  create: [BudgetCreateInput!]
  update: [BudgetUpdateWithWhereUniqueNestedInput!]
  upsert: [BudgetUpsertWithWhereUniqueNestedInput!]
  delete: [BudgetWhereUniqueInput!]
  connect: [BudgetWhereUniqueInput!]
  set: [BudgetWhereUniqueInput!]
  disconnect: [BudgetWhereUniqueInput!]
  deleteMany: [BudgetScalarWhereInput!]
  updateMany: [BudgetUpdateManyWithWhereNestedInput!]
}

input BudgetUpdateManyMutationInput {
  total: Float
  startDate: DateTime
  endDate: DateTime
  savingsTarget: Float
}

input BudgetUpdateManyWithWhereNestedInput {
  where: BudgetScalarWhereInput!
  data: BudgetUpdateManyDataInput!
}

input BudgetUpdateWithWhereUniqueNestedInput {
  where: BudgetWhereUniqueInput!
  data: BudgetUpdateDataInput!
}

input BudgetUpsertWithWhereUniqueNestedInput {
  where: BudgetWhereUniqueInput!
  update: BudgetUpdateDataInput!
  create: BudgetCreateInput!
}

input BudgetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  total: Float
  total_not: Float
  total_in: [Float!]
  total_not_in: [Float!]
  total_lt: Float
  total_lte: Float
  total_gt: Float
  total_gte: Float
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  savingsTarget: Float
  savingsTarget_not: Float
  savingsTarget_in: [Float!]
  savingsTarget_not_in: [Float!]
  savingsTarget_lt: Float
  savingsTarget_lte: Float
  savingsTarget_gt: Float
  savingsTarget_gte: Float
  expenses_every: ExpenseWhereInput
  expenses_some: ExpenseWhereInput
  expenses_none: ExpenseWhereInput
  savings_every: SavingsWhereInput
  savings_some: SavingsWhereInput
  savings_none: SavingsWhereInput
  AND: [BudgetWhereInput!]
  OR: [BudgetWhereInput!]
  NOT: [BudgetWhereInput!]
}

input BudgetWhereUniqueInput {
  id: ID
  startDate: DateTime
  endDate: DateTime
}

scalar DateTime

type Expense {
  id: ID!
  expenseAmount: Float!
  expenseDesc: String!
  expenseCategory: String!
}

type ExpenseConnection {
  pageInfo: PageInfo!
  edges: [ExpenseEdge]!
  aggregate: AggregateExpense!
}

input ExpenseCreateInput {
  id: ID
  expenseAmount: Float!
  expenseDesc: String!
  expenseCategory: String!
}

input ExpenseCreateManyInput {
  create: [ExpenseCreateInput!]
  connect: [ExpenseWhereUniqueInput!]
}

type ExpenseEdge {
  node: Expense!
  cursor: String!
}

enum ExpenseOrderByInput {
  id_ASC
  id_DESC
  expenseAmount_ASC
  expenseAmount_DESC
  expenseDesc_ASC
  expenseDesc_DESC
  expenseCategory_ASC
  expenseCategory_DESC
}

type ExpensePreviousValues {
  id: ID!
  expenseAmount: Float!
  expenseDesc: String!
  expenseCategory: String!
}

input ExpenseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  expenseAmount: Float
  expenseAmount_not: Float
  expenseAmount_in: [Float!]
  expenseAmount_not_in: [Float!]
  expenseAmount_lt: Float
  expenseAmount_lte: Float
  expenseAmount_gt: Float
  expenseAmount_gte: Float
  expenseDesc: String
  expenseDesc_not: String
  expenseDesc_in: [String!]
  expenseDesc_not_in: [String!]
  expenseDesc_lt: String
  expenseDesc_lte: String
  expenseDesc_gt: String
  expenseDesc_gte: String
  expenseDesc_contains: String
  expenseDesc_not_contains: String
  expenseDesc_starts_with: String
  expenseDesc_not_starts_with: String
  expenseDesc_ends_with: String
  expenseDesc_not_ends_with: String
  expenseCategory: String
  expenseCategory_not: String
  expenseCategory_in: [String!]
  expenseCategory_not_in: [String!]
  expenseCategory_lt: String
  expenseCategory_lte: String
  expenseCategory_gt: String
  expenseCategory_gte: String
  expenseCategory_contains: String
  expenseCategory_not_contains: String
  expenseCategory_starts_with: String
  expenseCategory_not_starts_with: String
  expenseCategory_ends_with: String
  expenseCategory_not_ends_with: String
  AND: [ExpenseScalarWhereInput!]
  OR: [ExpenseScalarWhereInput!]
  NOT: [ExpenseScalarWhereInput!]
}

type ExpenseSubscriptionPayload {
  mutation: MutationType!
  node: Expense
  updatedFields: [String!]
  previousValues: ExpensePreviousValues
}

input ExpenseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExpenseWhereInput
  AND: [ExpenseSubscriptionWhereInput!]
  OR: [ExpenseSubscriptionWhereInput!]
  NOT: [ExpenseSubscriptionWhereInput!]
}

input ExpenseUpdateDataInput {
  expenseAmount: Float
  expenseDesc: String
  expenseCategory: String
}

input ExpenseUpdateInput {
  expenseAmount: Float
  expenseDesc: String
  expenseCategory: String
}

input ExpenseUpdateManyDataInput {
  expenseAmount: Float
  expenseDesc: String
  expenseCategory: String
}

input ExpenseUpdateManyInput {
  create: [ExpenseCreateInput!]
  update: [ExpenseUpdateWithWhereUniqueNestedInput!]
  upsert: [ExpenseUpsertWithWhereUniqueNestedInput!]
  delete: [ExpenseWhereUniqueInput!]
  connect: [ExpenseWhereUniqueInput!]
  set: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  deleteMany: [ExpenseScalarWhereInput!]
  updateMany: [ExpenseUpdateManyWithWhereNestedInput!]
}

input ExpenseUpdateManyMutationInput {
  expenseAmount: Float
  expenseDesc: String
  expenseCategory: String
}

input ExpenseUpdateManyWithWhereNestedInput {
  where: ExpenseScalarWhereInput!
  data: ExpenseUpdateManyDataInput!
}

input ExpenseUpdateWithWhereUniqueNestedInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateDataInput!
}

input ExpenseUpsertWithWhereUniqueNestedInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateDataInput!
  create: ExpenseCreateInput!
}

input ExpenseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  expenseAmount: Float
  expenseAmount_not: Float
  expenseAmount_in: [Float!]
  expenseAmount_not_in: [Float!]
  expenseAmount_lt: Float
  expenseAmount_lte: Float
  expenseAmount_gt: Float
  expenseAmount_gte: Float
  expenseDesc: String
  expenseDesc_not: String
  expenseDesc_in: [String!]
  expenseDesc_not_in: [String!]
  expenseDesc_lt: String
  expenseDesc_lte: String
  expenseDesc_gt: String
  expenseDesc_gte: String
  expenseDesc_contains: String
  expenseDesc_not_contains: String
  expenseDesc_starts_with: String
  expenseDesc_not_starts_with: String
  expenseDesc_ends_with: String
  expenseDesc_not_ends_with: String
  expenseCategory: String
  expenseCategory_not: String
  expenseCategory_in: [String!]
  expenseCategory_not_in: [String!]
  expenseCategory_lt: String
  expenseCategory_lte: String
  expenseCategory_gt: String
  expenseCategory_gte: String
  expenseCategory_contains: String
  expenseCategory_not_contains: String
  expenseCategory_starts_with: String
  expenseCategory_not_starts_with: String
  expenseCategory_ends_with: String
  expenseCategory_not_ends_with: String
  AND: [ExpenseWhereInput!]
  OR: [ExpenseWhereInput!]
  NOT: [ExpenseWhereInput!]
}

input ExpenseWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBudget(data: BudgetCreateInput!): Budget!
  updateBudget(data: BudgetUpdateInput!, where: BudgetWhereUniqueInput!): Budget
  updateManyBudgets(data: BudgetUpdateManyMutationInput!, where: BudgetWhereInput): BatchPayload!
  upsertBudget(where: BudgetWhereUniqueInput!, create: BudgetCreateInput!, update: BudgetUpdateInput!): Budget!
  deleteBudget(where: BudgetWhereUniqueInput!): Budget
  deleteManyBudgets(where: BudgetWhereInput): BatchPayload!
  createExpense(data: ExpenseCreateInput!): Expense!
  updateExpense(data: ExpenseUpdateInput!, where: ExpenseWhereUniqueInput!): Expense
  updateManyExpenses(data: ExpenseUpdateManyMutationInput!, where: ExpenseWhereInput): BatchPayload!
  upsertExpense(where: ExpenseWhereUniqueInput!, create: ExpenseCreateInput!, update: ExpenseUpdateInput!): Expense!
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense
  deleteManyExpenses(where: ExpenseWhereInput): BatchPayload!
  createSavings(data: SavingsCreateInput!): Savings!
  updateSavings(data: SavingsUpdateInput!, where: SavingsWhereUniqueInput!): Savings
  updateManySavingses(data: SavingsUpdateManyMutationInput!, where: SavingsWhereInput): BatchPayload!
  upsertSavings(where: SavingsWhereUniqueInput!, create: SavingsCreateInput!, update: SavingsUpdateInput!): Savings!
  deleteSavings(where: SavingsWhereUniqueInput!): Savings
  deleteManySavingses(where: SavingsWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  budget(where: BudgetWhereUniqueInput!): Budget
  budgets(where: BudgetWhereInput, orderBy: BudgetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Budget]!
  budgetsConnection(where: BudgetWhereInput, orderBy: BudgetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BudgetConnection!
  expense(where: ExpenseWhereUniqueInput!): Expense
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense]!
  expensesConnection(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpenseConnection!
  savings(where: SavingsWhereUniqueInput!): Savings
  savingses(where: SavingsWhereInput, orderBy: SavingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Savings]!
  savingsesConnection(where: SavingsWhereInput, orderBy: SavingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SavingsConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Savings {
  id: ID!
  total: Float!
  month: String!
  monthAmount: Float!
}

type SavingsConnection {
  pageInfo: PageInfo!
  edges: [SavingsEdge]!
  aggregate: AggregateSavings!
}

input SavingsCreateInput {
  id: ID
  total: Float!
  month: String!
  monthAmount: Float!
}

input SavingsCreateManyInput {
  create: [SavingsCreateInput!]
  connect: [SavingsWhereUniqueInput!]
}

type SavingsEdge {
  node: Savings!
  cursor: String!
}

enum SavingsOrderByInput {
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  month_ASC
  month_DESC
  monthAmount_ASC
  monthAmount_DESC
}

type SavingsPreviousValues {
  id: ID!
  total: Float!
  month: String!
  monthAmount: Float!
}

input SavingsScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  total: Float
  total_not: Float
  total_in: [Float!]
  total_not_in: [Float!]
  total_lt: Float
  total_lte: Float
  total_gt: Float
  total_gte: Float
  month: String
  month_not: String
  month_in: [String!]
  month_not_in: [String!]
  month_lt: String
  month_lte: String
  month_gt: String
  month_gte: String
  month_contains: String
  month_not_contains: String
  month_starts_with: String
  month_not_starts_with: String
  month_ends_with: String
  month_not_ends_with: String
  monthAmount: Float
  monthAmount_not: Float
  monthAmount_in: [Float!]
  monthAmount_not_in: [Float!]
  monthAmount_lt: Float
  monthAmount_lte: Float
  monthAmount_gt: Float
  monthAmount_gte: Float
  AND: [SavingsScalarWhereInput!]
  OR: [SavingsScalarWhereInput!]
  NOT: [SavingsScalarWhereInput!]
}

type SavingsSubscriptionPayload {
  mutation: MutationType!
  node: Savings
  updatedFields: [String!]
  previousValues: SavingsPreviousValues
}

input SavingsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SavingsWhereInput
  AND: [SavingsSubscriptionWhereInput!]
  OR: [SavingsSubscriptionWhereInput!]
  NOT: [SavingsSubscriptionWhereInput!]
}

input SavingsUpdateDataInput {
  total: Float
  month: String
  monthAmount: Float
}

input SavingsUpdateInput {
  total: Float
  month: String
  monthAmount: Float
}

input SavingsUpdateManyDataInput {
  total: Float
  month: String
  monthAmount: Float
}

input SavingsUpdateManyInput {
  create: [SavingsCreateInput!]
  update: [SavingsUpdateWithWhereUniqueNestedInput!]
  upsert: [SavingsUpsertWithWhereUniqueNestedInput!]
  delete: [SavingsWhereUniqueInput!]
  connect: [SavingsWhereUniqueInput!]
  set: [SavingsWhereUniqueInput!]
  disconnect: [SavingsWhereUniqueInput!]
  deleteMany: [SavingsScalarWhereInput!]
  updateMany: [SavingsUpdateManyWithWhereNestedInput!]
}

input SavingsUpdateManyMutationInput {
  total: Float
  month: String
  monthAmount: Float
}

input SavingsUpdateManyWithWhereNestedInput {
  where: SavingsScalarWhereInput!
  data: SavingsUpdateManyDataInput!
}

input SavingsUpdateWithWhereUniqueNestedInput {
  where: SavingsWhereUniqueInput!
  data: SavingsUpdateDataInput!
}

input SavingsUpsertWithWhereUniqueNestedInput {
  where: SavingsWhereUniqueInput!
  update: SavingsUpdateDataInput!
  create: SavingsCreateInput!
}

input SavingsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  total: Float
  total_not: Float
  total_in: [Float!]
  total_not_in: [Float!]
  total_lt: Float
  total_lte: Float
  total_gt: Float
  total_gte: Float
  month: String
  month_not: String
  month_in: [String!]
  month_not_in: [String!]
  month_lt: String
  month_lte: String
  month_gt: String
  month_gte: String
  month_contains: String
  month_not_contains: String
  month_starts_with: String
  month_not_starts_with: String
  month_ends_with: String
  month_not_ends_with: String
  monthAmount: Float
  monthAmount_not: Float
  monthAmount_in: [Float!]
  monthAmount_not_in: [Float!]
  monthAmount_lt: Float
  monthAmount_lte: Float
  monthAmount_gt: Float
  monthAmount_gte: Float
  AND: [SavingsWhereInput!]
  OR: [SavingsWhereInput!]
  NOT: [SavingsWhereInput!]
}

input SavingsWhereUniqueInput {
  id: ID
}

type Subscription {
  budget(where: BudgetSubscriptionWhereInput): BudgetSubscriptionPayload
  expense(where: ExpenseSubscriptionWhereInput): ExpenseSubscriptionPayload
  savings(where: SavingsSubscriptionWhereInput): SavingsSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  budgets(where: BudgetWhereInput, orderBy: BudgetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Budget!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  budgets: BudgetCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  budgets: BudgetUpdateManyInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  budgets_every: BudgetWhereInput
  budgets_some: BudgetWhereInput
  budgets_none: BudgetWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    